DOM 
1.DOM概述
1.DOM的概念
   DOM文档对象模型，DOM对象不仅仅是一个普通的内置对象，它还是一个巨大的API的核心对象，他将文档的内容呈现在js前面，并赋予了js操作文档的能力。
2.DOM和JavaScript的关系
  一个web页面是一个文档，这文档可以在浏览器窗口或者作为HTML源代码显示出来。DOM能够使用JavaScript脚本语言进行修改。
3.DOM节点
 根据w3c的html  DOM标准，html文档找那个的所有内容都是节点。
  整个文档都是一个文档节点
  每个html元素是元素节点
  html元素内的文本是文本节点
  每个html属性都是属性节点
  注释也是节点，叫注释节点
4.DOM树
 DOM树有DOM文档树和DOM元素树两种，DOM元素树包含的只有元素节点，而DOM文档树则包括DOM文档中的所有内容。
2.获取元素
1.用id获取元素
 getElementById（）的方法，
var d = document.getElementById('d');
       console.log(d);
2.用标签名获取元素
 getElementsByTagName（）
       var lis = document.getElementsByTagName('li');
     console.log(lis);
3.用类名获取元素
<ul>
        <li class="a">1</li>
        <li class="a">2</li>
        <li class="b">3</li>
    </ul>
    <script>
      var a = document.getElementsByClassName('a');
      console.log(a);
4.用name属性值获取元素
 getElementsByName()
var sex = document.getElementsByName('sex');
        console.log(sex);
5.用选择器获取元素
 querySelector()和querySelectorAll（）可以依靠选择器找到元素，但是前者只能找到元素列表的第一个元素，而后者可以全部找到

3获取和设置元素中的其他信息
1.获取元素名
var div = document.getElementById('mydiv');
        console.log(div.tagName);
2.获取元素节点里的内容
var div = document.getElementById('mydiv');
        console.log(div.innerHTML);
3.获取元素节点中的文本
<div id="mydiv"><span>nasng</span></div>
        var div = document.getElementById('mydiv');
      console.log(div.innerText);

      div.innerText = 'hello';
4.获取元素的类名
   var div = document.getElementById('mydiv');
        console.log(div.className);
如果更换其中一个类,则需要考虑该字符串中其他类是否应该一起设置.
        div.className = 'd a c';
        console.log(div.className);
5.获取元素样式
  <div style="background-color: blue;"></div>
    <script>
     var div = document.getElementsByTagName('div');
     
        console.log(div[0],style.backgroundColor);
6.获取元素的属性
var  div = document.getElementById('mydiv');
       var a = document.getElementsByTagName('a');
       console.log(div.getAttribute('data-tyy'));
       console.log(a[0].getAttribute('href'));
7.设置元素属性
    setAttribute()可以设置元素的某个属性，第一参数是属性名，第二个参数是属性值，都要用引号括起来一逗号分隔。

     var  div = document.getElementsByTagName('div');
    var a = document.getElementsByTagName('a');

     div[0].setAttribute('id','mydiv');
     a[0].setAttribute('href','http://www.baidu.com');
8.删除元素属性
  使用removeAttribute()可以删除某个元素的某个属性，括号中放入需要删除的属性名，用引号包裹
4.增加元素
1.创建元素节点
// 用一个变量承接在文档中‘创建；的一个元素
      var div = document.createElement('div');
      // 将已经创建的元素放在想放的位置
      document.body.appendChild(div);
3.创建文本节点
  在文档中创建文本document.createTextNode（‘一段文字’）在括号中将要创建的字符串放入，最后插到需要的元素
4.css样式赋予
style.CSSText是一个css的样式集合，他可以把css层叠样式表中的css样式直接放在该属性后，就不需要一条一条去赋予样式了，可以一次性赋予样式
5.在某元素前插入创建的新元素
    <ul id="ul">
        <li id="pg">苹果</li>
        <li id="jz">桔子</li>
        <li>香蕉</li>
    </ul>
    <script>
        var ul = document.getElementById('ul');
        var pg = document.getElementById('pg');
        var li = document.createElement('li');
        ul.insertBefore(li,jz);
        var t = document.createTextNode('火龙果');
        li.appendChild(t);
5.删除和替换元素
1.元素的替换
   元素的替换是在父元素中一个子元素需要被另一个新的子元素所替代，使用replaceChild（）方法，该方法有两个参数，第一个地将要替换的新元素，第二个是被替换的旧元素，中间用逗号分隔
 <div id="mydiv"></div>
      <script>
       var mydiv =document.getElementById('mydiv');
       var myp = document.createElement('p');
       //在父元素中替换子元素，第一个是新的元素，第二个是旧的
       document.body.replaceChild(myp,mydiv);
2.元素的删除
  元素的删除是在父元素的其中一个子元素需要删除，使用removeChild（）方法，将需要删除的元素放入括号中

      <div id="mydiv"></div>
      <script>
       var mydiv =document.getElementById('mydiv');
       document.body.removeChild(mydiv);
6.元素查找（node）
  ***节点是DOM树上的每一个节点，其中包括：元素、文本、属性、注释等
1.节点属性
   var mydiv = document.getElementById('mydiv');
        console.log(mydiv,nodeName)
        console.log(mydiv,nodeValue)
        console.log(mydiv,nodeType)
2.层次节点
   节点可以分为：父节点与子节点、兄弟节点，当我们知道其中之的时候，可以用一些方法找到另一个
3.获取所有子节点
   使用childNodes属性拿到的是该元素下的所有节点

      <ul id="myul">
        <li>111</li>
        <li>222</li>
        <li>333</li>
    </ul>
    <script>
     var  myul = document.getElementById('myul');
     console.log(myul.childNodes);
4.获取第一个和最后一个子节点
   用firstChild和lastChild可以拿到该父元素下的第一个和最后一个子节点，注意不一定是元素节点
5.获取父节点
  使用parentNode属性可以拿到该元素的父节点，注意父节点只有一个
    <ul id="myul"><li>111</li><li>222</li><li>333</li></ul>
        <script>
         var  myul = document.getElementById('myul');
         console.log(myul.parentNode);
6.获取兄弟节点
  使用previousSibling和nextSibling可以获得该元素的前一个和后一个兄弟节点，只能获取一个

      <h2>h2</h2><div id="mydiv">div</div><p>p</p>
        <script>
         var  mydiv = document.getElementById('mydiv');
         console.log(mydiv.previousSibling);
7.元素的位置宽高属性
1.offsetWidth和offseHeight
       <div id="mydiv">div</div>
        <script>
         var  mydiv = document.getElementById('mydiv');
         console.log(mydiv.style);//这种方式只能拿到内联样式
         console.log(mydiv.offsetWidth);
3.clientWidth和clientHeight
    clientWidth和clientHeight属性也可以获取元素的宽高，但与offsetWidth不同的是不包含边框
      console.log(mydiv.clientWidth)
4.子元素与父元素的距离
   offsetLeft和offsetTop是距离body左边界和上边界的距离，但如果该子元素使用了定位属性，则offsetLeft和offsetTop参照的就不在是body而是距离它最近的父级元素
   <div id="baba">
        <div id="erzi"></div>
    </div>
        <script>
         var  erzi = document.getElementById('erzi');
         console.log(erzi.offsetLeft);
         console.log(erzi.offsetTop);
         </script>
